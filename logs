#!/usr/bin/env node
'use strict';

const exec = require('child_process').exec;
const path = require('path');
const mkdirp = require('mkdirp');
const es = require('event-stream');
const fs = require('fs');
const argv = process.argv;
const outDir = path.join(process.cwd(), argv[2]);

mkdirp.sync(outDir);

const scripts = [
  ['./props context action', 'action-context-types.json'],
  //['./hits YYYY-MM-DD', 'hits-per-day.json'],
  //['./hits YYYY-MM-DD-HH', 'hits-per-hour.json'],
  ['./hits YYYY-MM-DD-HH-mm', 'hits-per-minute.json'],
  //['./actions YYYY-MM-DD', 'actions-per-day.json'],
  //['./actions YYYY-MM-DD-HH', 'actions-per-hour.json'],
  ['./actions YYYY-MM-DD-HH-mm', 'actions-per-minute.json'],
  //['./actions total YYYY-MM-DD', 'total-actions-per-day.json'],
  //['./actions total YYYY-MM-DD-HH', 'total-actions-per-hour.json'],
  //['./actions total YYYY-MM-DD-HH-mm', 'total-actions-per-minute.json'],
  //['./uniques YYYY-MM-DD', 'uniques-per-day.json'],
  //['./uniques YYYY-MM-DD-HH', 'uniques-per-hour.json'],
  ['./uniques YYYY-MM-DD-HH-mm', 'uniques-per-minute.json'],
  ['./filter-instructors | ./uniques YYYY-MM-DD-HH-mm', 'instructor-uniques-per-minute.json'],
  ['./filter-instructors | ./actions YYYY-MM-DD-HH-mm', 'instructor-actions-per-minute.json'],
  ['./filter-instructors | ./hits YYYY-MM-DD-HH-mm', 'instructor-hits-per-minute.json'],
  ['./filter-students | ./uniques YYYY-MM-DD-HH-mm', 'student-uniques-per-minute.json'],
  ['./filter-students | ./actions YYYY-MM-DD-HH-mm', 'student-actions-per-minute.json'],
  ['./filter-students | ./hits YYYY-MM-DD-HH-mm', 'student-hits-per-minute.json']
].filter(function(s) {
  return argv[3] ? s[1].indexOf(argv[3]) !== -1 : true;
});

const streams = scripts.map(function(s) {
  const cmd = s[0];
  const outFile = s[1];

  const script = exec(cmd, { maxBuffer: 1000 * 1000 * 1024 }); // maxBuffer = 1000MB
  script.on('error', onError);
  script.stdout.pipe(fs.createWriteStream(path.join(outDir, outFile)));

  return script.stdin;
});

process.stdin.pipe(tee(streams));

function onError(err) {
  console.log('error');
  console.log(err);
}

function tee(streams) {
  return es.through(function(chunk) {
    streams.forEach(function(stream) {
      stream.write(chunk);
    });

    this.push(chunk);
  }, function() {
    streams.forEach(function(stream) {
      stream.end();
    });

    this.emit('end');
  });
}
